# You can use any of the options supported by packcheck as environment
# variables here.  See https://github.com/harendra-kumar/packcheck for all
# options and their explanation.
environment:
    # ------------------------------------------------------------------------
    # Global options, you can use these per build as well
    # ------------------------------------------------------------------------
  global:
    # ------------------------------------------------------------------------
    # Common options
    # ------------------------------------------------------------------------
    GHC_OPTIONS: "-Werror"
    CABAL_REINIT_CONFIG: "y"
    LC_ALL: "C.UTF-8"

    # ------------------------------------------------------------------------
    # What to build
    # ------------------------------------------------------------------------
    # DISABLE_TEST: "y"
    # DISABLE_BENCH: "y"
    # DISABLE_DOCS: "y"
    DISABLE_DIST_CHECKS: "y"
    DISABLE_SDIST_BUILD: "y"
    ENABLE_INSTALL: "y"

    # ------------------------------------------------------------------------
    # stack options
    # ------------------------------------------------------------------------
    # Note requiring a specific version of stack using STACKVER may fail due to
    # github API limit while checking and upgrading/downgrading to the specific
    # version.
    #STACKVER: "1.6.5"
    STACK_UPGRADE: "y"
    RESOLVER: "lts-13"
    STACK_ROOT: "c:\\sr"

    # ------------------------------------------------------------------------
    # cabal options
    # ------------------------------------------------------------------------
    CABAL_CHECK_RELAX: "y"
    CABAL_NO_SANDBOX: "y"
    CABAL_HACKAGE_MIRROR: "hackage.haskell.org:http://hackage.fpcomplete.com"

    # ------------------------------------------------------------------------
    # Where to find the required tools
    # ------------------------------------------------------------------------
    PATH: "%PATH%;%APPDATA%\\local\\bin"
    LOCAL_BIN: "%APPDATA%\\local\\bin"

    # ------------------------------------------------------------------------
    # Location of packcheck.sh (the shell script invoked to perform CI tests ).
    # ------------------------------------------------------------------------
    # You can either commit the packcheck.sh script at this path in your repo or
    # you can use it by specifying the PACKCHECK_REPO_URL option below in which
    # case it will be automatically copied from the packcheck repo to this path
    # during CI tests. In any case it is finally invoked from this path.
    PACKCHECK_LOCAL_PATH: "./packcheck.sh"
    # If you have not committed packcheck.sh in your repo at PACKCHECK_LOCAL_PATH
    # then it is automatically pulled from this URL.
    PACKCHECK_GITHUB_URL: "https://raw.githubusercontent.com/harendra-kumar/packcheck"
    PACKCHECK_GITHUB_COMMIT: "42d90d6b93bee7741e577d0e3615754165c648f8"

cache:
  - "%STACK_ROOT%"
  - "%LOCAL_BIN%"
  - "%APPDATA%\\cabal"
  - "%APPDATA%\\ghc"
# - "%LOCALAPPDATA%\\Programs\\stack"

clone_folder: "c:\\pkg"
build: off

before_test:
- if not exist %PACKCHECK_LOCAL_PATH% curl -sSkL -o%PACKCHECK_LOCAL_PATH% %PACKCHECK_GITHUB_URL%/%PACKCHECK_GITHUB_COMMIT%/packcheck.sh
- if not exist %LOCAL_BIN% mkdir %LOCAL_BIN%
- where stack.exe || curl -sSkL -ostack.zip http://www.stackage.org/stack/windows-x86_64 && 7z x stack.zip stack.exe && move stack.exe %LOCAL_BIN%
- if defined STACKVER (stack upgrade --binary-only --binary-version %STACKVER%) else (stack upgrade --binary-only || ver > nul)
- stack --version

test_script:
- stack setup > nul
- for /f "usebackq tokens=*" %%i in (`where 7z.exe`) do set PATH7Z=%%i\..
- for /f "usebackq tokens=*" %%i in (`where git.exe`) do set PATHGIT=%%i\..
- chcp 65001 && stack exec bash -- -c "chmod +x %PACKCHECK_LOCAL_PATH%; %PACKCHECK_LOCAL_PATH% stack PATH=/usr/bin:\"%PATH7Z%\":\"%PATHGIT%\""
